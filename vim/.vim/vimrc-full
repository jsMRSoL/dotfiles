" VUNDLE {{{
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and
" initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-markdown'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'junegunn/fzf.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ajmwagar/vim-deus'
Plugin 'tomasiser/vim-code-dark'
Plugin 'tommcdo/vim-exchange'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'jceb/vim-orgmode'
Plugin 'mattn/calendar-vim'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-repeat'
Plugin 'vim-scripts/utl.vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'vim-scripts/Tagbar'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'chriskempson/base16-vim'
Plugin 'suan/vim-instant-markdown'
Plugin 'rust-lang/rust.vim'
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
Plugin 'mattn/vim-lsp-settings'
Plugin 'thomasfaingnaert/vim-lsp-ultisnips'
Plugin 'thomasfaingnaert/vim-lsp-snippets'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" }}} " Put your non-Plugin stuff after this line
"Airline tweaks {{{
"    let g:airline_left_sep='▶'
"    let g:airline_right_sep='◄'
    let g:airline_detect_modified             = 1
    let g:airline_detect_paste                = 1
    let g:airline_detect_spell                = 1
    let g:airline_detect_spelllang            = 1
    let g:airline_powerline_fonts             = 1
" }}}
"Ultisnips config {{{
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger       = "<tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

" If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit          = "vertical"
    let g:UltisnipsSnippetsDir        = "/home/simon/.vim/customsnips"
    let g:UltiSnipsSnippetDirectories = ["UltiSnips", "/home/simon/.vim/customsnips"]
    cmap USE UltiSnipsEdit
    let g:UltiSnipsUsePythonVersion = 3
" }}}
" YouCompleteMe config {{{
"    let g:ycm_python_binary_path = '/usr/bin/python3'
" }}}
" UltiSnips / YouCompleteMe tab config {{{
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
"}}}
" orgmode config  {{{
    let g:org_heading_shade_leading_stars = 1
    let g:org_indent                      = 1
    let g:org_aggressive_conceal          = 1    |" Should ensure all inline markups are hidden. Experimental!
" }}}
" Vim-markdown config {{{
        let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
" }}}
" table mode config {{{
    let g:table_mode_corner_corner = '+'
" }}}
" NERDTree config  {{{
    let g:NERDTreeHijackNetrw = 0
" "--------------------------------------------------------------------------}}}
" dragvisuals config {{{
     vmap  <expr>  <LEFT>   DVB_Drag('left')
     vmap  <expr>  <RIGHT>  DVB_Drag('right')
     vmap  <expr>  <DOWN>   DVB_Drag('down')
     vmap  <expr>  <UP>     DVB_Drag('up')
     vmap  <expr>  D        DVB_Duplicate()
" }}}
" listtrans config {{{
    nnoremap  <leader>l   :call ListTrans_toggle_format()<CR>
    vnoremap  <leader>l   :call ListTrans_toggle_format('visual')<CR>
" }}}
"myplugindir {{{
    set rtp+=~/.vim/bundle/uplooker
" }}}
"fzf plugin {{{
    set rtp+=~/.fzfsrc

" Customize fzf colors to match your color scheme
let g:fzf_colors =
 \ { 'fg':      ['fg', 'Normal'],
   \ 'bg':      ['bg', 'Normal'],
   \ 'hl':      ['fg', 'Comment'],
   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
   \ 'hl+':     ['fg', 'Statement'],
   \ 'info':    ['fg', 'PreProc'],
   \ 'border':  ['fg', 'Ignore'],
   \ 'prompt':  ['fg', 'Conditional'],
   \ 'pointer': ['fg', 'Exception'],
   \ 'marker':  ['fg', 'Keyword'],
   \ 'spinner': ['fg', 'Label'],
   \ 'header':  ['fg', 'Comment'] }
" }}}
"Basics {{{
    set nocompatible
    set showmode
    set number
    set relativenumber
    syntax on
    set belloff=all
    set cursorline
    set backspace=indent,start,eol
    set wildmenu
    set shortmess+=I
    set virtualedit=block
    cabbrev vhelp   vert help
" }}}
"Set control keys {{{
    " Leader keys

    let mapleader = "\<space>"
    let maplocalleader = "\\"
    " Esc mappings for all modes
    inoremap jk <Esc>
    vnoremap jk <Esc>
    cnoremap jk <Esc>
    inoremap fd <Esc>
    vnoremap fd <Esc>
    cnoremap fd <Esc>
    " Paste issue dodge
    nnoremap <F2> :set invpaste paste?<CR>
    set pastetoggle=<F2>
    nnoremap <F3> :%s/\s\+$//<CR>
    noremap <F4> :CLU<CR>
    noremap <localleader><F4> :BLU<CR>
    noremap <leader>g  :GLU<CR>
    nnoremap <F5> :PrFile<CR>
    map <F6> :setlocal spell! spelllang=en_gb<CR>
    nnoremap <F7> :SAC<CR>
    nnoremap <F8> <C-W>ozt<C-W>s
    nnoremap <F9> O78i-j0
    map <F10> :PLU<CR>
    map <F11> :SHL<CR>
    map <localleader><F11> :LUL<CR>
    map <F12> :GLL<CR>
    map <localleader><F12> :SVS<CR>
    map <localleader>l  :LTL<CR>
    nnoremap <localleader>e     :EMR<CR>
    nnoremap <leader>g :grep -R 'this' .<CR>
    set grepprg=grep
    set grepformat=%f:%l:%m
    set mouse=a
    "Cursor settings
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
    " Problem keys
    nmap Q  <nop>
    nmap K  <nop>
    cnoremap <C-a> <Home>   |" To allow easy jump to start of command line
    cnoremap <C-e> <End>    |" Already seems to work but wth.
    cnoremap <C-h> <Left>   |" To allow easy editing
    cnoremap <C-l> <Right>  |" As above
    " File navigation
    cmap    BOF    browse oldfiles<CR>
    nmap    ##      :b#<CR> |" Jump to last open file
    nmap    #'      :bnext<CR> |" Cycle through open buffers
    nmap    <CR>    @@      |" Repeat last macro
    set switchbuf=usetab    |" switch to already open buffer
    set hidden              |" enables hiding (as yet) unsaved buffer
" }}}
" Manage vim's internal files  {{{
" Prevent write-permissions errors
if exists('$SUDO_USER')
    set nobackup
    set nowritebackup
else
    set backupdir=~/.vim/tmp/backup
    set backupdir+=.
endif
" Keep swapfiles out of the way
  " creates a path based on the current buffer's path
if exists('$SUDO_USER')
    set noswapfile
else
    set directory=~/.vim/tmp/swap//
    set directory+=.
endif
" Manage undo files for root and normal user
if exists('$SUDO_USER')
    set noundofile
else
    set undodir=~/.vim/tmp/undo//
    set undodir+=.
    set undofile
endif
" Manage viminfo file
if exists('$SUDO_USER')
    set viminfo=
else
    if isdirectory(expand('~/.vim'))
        " name of viminfo file must be last argument
        set viminfo='1000,f1,<500,n~/.config/vim/viminfo
    endif
endif

if !empty(glob('~/.config/vim/viminfo'))
      if !filereadable(expand('~/.config/vim/viminfo'))
            echoerr 'warning: ~/.config/vim/viminfo exists but is not readable'
      endif
endif
"}}}
" vinaigrette  {{{
    nnoremap -  :edit <C-R>=empty(expand('%')) ? '.' : expand('%:p:h')<CR><CR>
"--------------------------------------------------------------------------}}}
"Call fzf {{{
    nnoremap <leader>ff :Files ~/<CR>
    nnoremap <leader>fv :Files ~/.vim/<CR>
" }}}
"NERDtree bindings {{{
    nnoremap <C-n> :NERDTreeToggle<CR>
" }}}
"Source .vimrc {{{
    nnoremap <leader>sv :source ~/.config/vim/vimrc<CR>
    nnoremap <leader>ev :tabe ~/.config/vim/vimrc<CR>
" }}}
"Folding  {{{
    " nnoremap <space> za
" }}}
"Tabs / Line breaking/ Format options  {{{
    "Tabs
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set shiftround
    set smarttab    " Enables <BS> for dedenting.
    " Linebreaks and wrapping
    set linebreak
    set textwidth=78
    set wrap
    " Indenting
    set autoindent
    set breakindent
    set breakindentopt=shift:2
    let &showbreak = '⤷ '
    " Format options
    " previous options croql
    set formatoptions=qljn
    set nojoinspaces        |" Don't insert two spaces after J
    " Highlighting
    set highlight+=@:ColorColumn
    set highlight+=N:DiffText
    execute 'highlight link EndOfBuffer ColorColumn'
    " Brackets
    set noshowmatch         |" Don't jump between match brackets. Too annoying.
    " Screenupdating
    set lazyredraw          |" Turns off screenupdating during macro playback
    " Scrolling
    set scrolloff=1
    " Lists
    set list
    set listchars=nbsp:⊘
    set listchars+=tab:‣∙
    set listchars+=extends:⁍
    set listchars+=precedes:⁌
    set listchars+=trail:∘
" }}}
"Colours {{{
    set t_Co=256
    set t_ut=
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"    set background=dark " Setting dark mode
    colorscheme base16-tomorrow-night
"    colorscheme base16-default-dark
    function! ToggleColorCol()
        if !exists('w:ToggledColorCol')
            let w:ToggledColorCol = 0
        endif
        if w:ToggledColorCol == '0'
            set colorcolumn=78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103
            let w:ToggledColorCol = 1
            echom 'colorcolumn enabled'
        else
            set colorcolumn=
            let w:ToggledColorCol = 0
            echom 'colorcolumn off'
        endif
    endfunction
    nnoremap <leader>cc :call ToggleColorCol()<CR>
" }}}
"Searches {{{
    set ignorecase
    set smartcase
    set incsearch
    set showmatch
    set hlsearch
    nnoremap <leader><space> :noh<CR>
" }}}
"Splits at bottom and right {{{
    set splitright  " Moves focus right with split
    set splitbelow  " Moves focus down with split
" }}}
"Easier line traversing {{{
    nnoremap H 0
    nnoremap L $
" }}}
"Marker jumping  {{{
    nnoremap <leader>n /<++><Enter>"_c4l
    nnoremap <leader>p ?<++><Enter>"_c4h
    inoremap <leader>n <Esc>/<++><Enter>"_c4l
    inoremap <leader>p <Esc>?<++><Enter>"_c4h
" }}}
"Compile latex document {{{
    augroup filetype_tex
        autocmd!
        autocmd FileType tex inoremap <F5> <Esc>:!pdflatex<space>%<Enter>a
        autocmd FileType tex nnoremap <F5> :!pdflatex<space>%<Enter>
    augroup END
" }}}
"Templates  {{{
    augroup templates
        autocmd!
        autocmd BufNewFile *.* silent! execute '0r ~/.config/vim/templates/skeleton.'.expand("<afile>:e")
    augroup END
" }}}
"Dictionary test  {{{
    augroup mydictionary
        autocmd!
        autocmd FileType * execute 'setlocal dict+=~/.vim/mydictionaries/'.&filetype.'.txt'
    augroup END
" }}}
"Per filetype abbreviations  {{{
    augroup filetype_vim
        autocmd!
        autocmd FileType vim setlocal foldmethod=marker
        autocmd FileType vim    :iabbrev <buffer> vcm   \|"
    augroup END

    augroup filetype_py
        autocmd!
        autocmd FileType python    :iabbrev <buffer> iff if:<left>
        "mapping to comment out python lines
        autocmd FileType python    nnoremap <buffer> <localleader>cm I#<Esc>
    augroup END

    augroup filetype_js
        autocmd!
        autocmd FileType javascript    :iabbrev <buffer> iff if ()<left>
    augroup END

    augroup filetype_latin
        autocmd!
        autocmd BufNew,BufRead *.ltn setlocal filetype=latin
    augroup END

    augroup filetype_markdown
        autocmd!
        autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    augroup END

    augroup focus
        autocmd BufEnter,FocusGained,VimEnter,WinEnter * let &l:colorcolumn=join(range(79, 150), ',')
        autocmd BufLeave,FocusLost,WinLeave * let &l:colorcolumn=join(range(1, 150), ',')
    augroup END
" }}}
" Handle links  {{{
    " write to urlview
    nnoremap <leader>uv :w<Home>silent <End> !urlview<CR>
    nnoremap <leader>ut :Utl<CR>
" }}}
" Line manipulation  {{{
"Move lines up and down
    nnoremap <leader><Down> ddp
    nnoremap <leader><Up> ddkP
    nnoremap <localleader>j ddp
    nnoremap <localleader>k ddkP
"Insert lines
    nnoremap <leader>o o<Esc>k
    nnoremap <leader>O O<Esc>j
"Delete lines
    nnoremap <leader>do jddk
    nnoremap <leader>dO kdd
" }}}
"Delete trailing whitespace {{{
    nnoremap <leader>w :%s/\s\+$//<CR>
" }}}
"Insert mode text processing {{{
    inoremap II     <Esc>I      |" Move to start of line
    inoremap AA     <Esc>A      |" Move to end of line
" }}}
"Yank to system clipboard {{{
    vnoremap <leader>cp :w !xsel -b<CR><CR>
    nnoremap <leader>cp :.w !xsel -b<CR><CR>
" }}}
"TYPOS {{{
    iabbrev waht what
    iabbrev tehn then
    iabbrev adn and
" }}}
" NETRW tweak {{{
    let g:netrw_liststyle    = 0
    let g:netrw_banner       = 0
    let g:netrw_browse_split = 0
" }}}
" Custom box commenting {{{
function! CommentBlock(comment, ...)
    "If 1 or more opt args, first opt arg is
    let introducer = a:0 >= 1 ? a:1 : "#"

    "If 2 or more opt args, 2nd opt arg is
    let box_char = a:0 >= 2 ? a:2 : "*"

    "If 3 or more opt args, 3rd opt arg is
    let width = a:0 >= 3 ? a:3 : len(a:comment)+5

    " Build the comment box and put the comment inside it...
    return introducer . repeat(box_char,width) . "\<CR>"
    \    . introducer . " " . a:comment . "\<CR>"
    \    . introducer . repeat(box_char,width) . "\<CR>"
endfunction

" Python /Shell comment box insertion map
    imap <silent> cmblk   <C-R>=CommentBlock(input("Enter comment: "),'#','#')<CR>
" }}}
" python {{{
function! MakeNewBuffer()
python3 << endPython

def create_new_buffer(file_name, file_type, contents):
    vim.command('rightbelow vsplit {}'.format(file_name))
    vim.command('normal! ggdG')
    vim.command('setlocal filetype={}'.format(file_type))
    vim.command('setlocal buftype=nowrite')
    vim.command('call append(0, {})'.format(contents))

def make_example_python_buffer():
    contents = ["def example_func():", "    print('I know kung-fu!')"]
    create_new_buffer("Example_buffer", "python", contents)

make_example_python_buffer()

endPython
endfunction
    " command! -nargs=0 MNB execute "normal! a\<C-R>=MakeNewBuffer()\<CR>"
    command! -nargs=0 MNB call MakeNewBuffer()

function! UnshuffleLines() range
python3 << endPython

def get_visual_selection():
    buf = vim.current.buffer
    (starting_line_num, col1) = buf.mark('<')
    (ending_line_num, col2) = buf.mark('>')
    lines = vim.eval('getline({}, {})'.format(starting_line_num, ending_line_num))
    return lines, starting_line_num

visual_selection, start_line = get_visual_selection()
steps = len(visual_selection)//2
new_lines = []
for i in range(steps):
    new_lines.append(visual_selection[i])
    new_lines.append(visual_selection[i+steps])

for i in range(len(new_lines)):
    vim.current.buffer[i+start_line-1] = new_lines[i]

endPython
endfunction
    command! -narg=0 -range USL call UnshuffleLines()
" }}}
" my vimscript functions {{{
"{{{ RearrangeLines
function! RearrangeLines(line1, line2, count) range
    " Rearrange lines from order 1, 3, 5, 2, 4, 6 to 1, 2, 3, 4, 5, 6
    if a:count == -1
        echo "Please visually select lines"
        return
    endif
    let lines = getline(a:line1, a:line2)
    let steps = len(lines)/2
    let new_lines = []
    for i in range(steps)
        call add(new_lines, lines[i])
        call add(new_lines, lines[i + steps])
    endfor
    call setline(a:line1, new_lines)
endfunction
"}}}
    command! -narg=0 -range RL call RearrangeLines(<line1>, <line2>, <count>)
    "{{{ ListToLine
function! ListToLine(line1, line2, count) range
    if a:count == -1
        echo "Please visually select your lines"
        return
    endif
    let my_lookup_lines = getline(a:line1, a:line2)
    execute 'normal gvd'
    let newline = join(my_lookup_lines, '; ')
    let newline = substitute(newline, '-  ', '', 'g')
    "call setpos('.', [0, a:line2, 1, 0])
    call setline(a:line1, newline)
endfunction
"}}}
    command! -narg=0 -range LTL call ListToLine(<line1>, <line2>, <count>)
    "{{{ GetLatinVocab
function! GetLatinVocab(line1) range
    " Wrapper for fetchLatinList.py
    let my_lookup_text = getline(a:line1)
    execute 'read !~/.vim/pythonx/fetchLatinList.py ' . shellescape(my_lookup_text)
    call setpos('.', [0, a:line1, 1, 0])
endfunction
"}}}
    command! -narg=0 -range GLV call GetLatinVocab(<line1>)
    "{{{ GetLatinVocabLines
function! GetLatinVocabLines(line1, line2) range
    " Wrapper for fetchLatinList.py
    let my_lookup_lines = getline(a:line1, a:line2)
    let my_lookup_text = join(my_lookup_lines)
    let my_lookup_text = substitute(my_lookup_text, ';', '.', 'g')
    let my_lookup_text = substitute(my_lookup_text, '!', '.', 'g')
    call setpos('.', [0, a:line2, 1, 0])
    execute 'read !~/.vim/pythonx/fetchLatinList.py ' . shellescape(my_lookup_text)
    call setpos('.', [0, a:line1, 1, 0])
endfunction
"}}}
    command! -narg=0 -range GLL call GetLatinVocabLines(<line1>, <line2>)
    "{{{ CLClookup
function! CLClookup(line1, line2) range
    " Wrapper for clc-lookup.py
    let my_lookup_lines = getline(a:line1, a:line2)
    let my_lookup_text = join(my_lookup_lines)
    let my_lookup_text = substitute(my_lookup_text, ';', '.', 'g')
    let my_lookup_text = substitute(my_lookup_text, '!', '.', 'g')
    call setpos('.', [0, a:line2, 1, 0])
    execute 'read !~/.vim/bundle/vim-clc-lookup/clclookup.py ' . shellescape(my_lookup_text)
    call setpos('.', [0, a:line1, 1, 0])
endfunction
"}}}
    command! -narg=0 -range CLU call CLClookup(<line1>, <line2>)
    "{{{ BackupLookup
function! BackupLookup()
    " For when CLC fails!
    let answer = system('grep -m1 ^' . shellescape(expand('<cword>'))
        \ . shellescape('[, ]') . ' ~/.vim/bundle/vim-clc-lookup/clc4-vocab')
    let answer = '-  ' . substitute(answer, '\n$', '', '')
    call setline('.', answer)
endfunction
"}}}
    command! -narg=0 BLU call BackupLookup()
    "{{{ GreekLookup
function! GreekLookup(line1, line2) range
    let lines = getline(a:line1, a:line2)
    let newlines = []
    execute '60vsplit Greek_Definitions'
    for line in lines
        execute 'normal ggdGgg'
        let answer = systemlist('grep -m9 :*' . shellescape(line)
            \ . ' ~/.vim/bundle/vim-GG-lookup/GCSE-Greek-vocab.txt')
        if len(answer) == 0
            call add(newlines, line)
            continue
        endif
        if len(answer) == 1
            call add(newlines, answer[0])
            continue
        endif
        let enum_answer = map(copy(answer), 'v:key . ". " . v:val') 
        call insert(enum_answer, 'Choose a definition for ' . line. ': ')
        call append('0', enum_answer)
        redraw
        let choice = input('Select a definition: ')
        "echo answer[choice]
        call add(newlines, answer[choice])
        redraw
    endfor
    execute 'close!'
    " echo newlines
    call append('$', newlines)
    execute a:line1 . ',' . a:line2 . 'delete'
endfunction
"}}}
    command! -narg=0 -range GLU call GreekLookup(<line1>, <line2>)
    "{{{ ShuntLine
function! ShuntLine()
     " Shunt line from cursor onwards down a line
    let [bufno, lineno, colno, offset] = getpos('.')
    let colno = colno - 1
    execute 'normal Do' . string(colno) . 'i p'
endfunction
"}}}
    command! -narg=0 SHL call ShuntLine()
    "{{{ PushLineUp
function! PushLineUp()
    execute 'normal dd'
    call search('^[^-]', 'b')
    execute 'normal p'
endfunction
"}}}
    command! -narg=0 PLU call PushLineUp()
    "{{{ LookupAndLabelOld
function! LookupAndLabelOld()
    let indent = matchstr(getline('.'), '^\s*')
    let words = split(getline('.'), '\s\s*')
    " echo "Words: "
    " echo words
    let topline = indent
    let bottomline = indent
    let dictionaryfile = "/home/simon/.config/vim/bundle/vim-amores2/amores2vocab.txt"
    for word in words
        " clean punctuation
        let cleanwd = substitute(word, '\(.\{-}\)[^A-z]', '\=submatch(1)', '')
        " determine headword
        " echo "cleanwd is : " . cleanwd
        if len(cleanwd) == 0
            continue
        endif
        let headwords = systemlist('/home/simon/.config/vim/bundle/vim-amores2/hermes.sh ' . shellescape(expand(cleanwd)))
        if len(headwords) == 0
            call add(headwords, cleanwd)
        endif
        " echo 'headwords: '
        " echo headwords
        " get definition
        let definitions = []
        let positions = []
        let defcount = 0
        for position in range(len(headwords))
            " let definition = system('/home/simon/.config/vim/bundle/vim-amores2/deffinder.sh ' . shellescape(expand(headwords[position])) . ' | tr -d "\n"')
            let definitionlist = systemlist('/home/simon/.config/vim/bundle/vim-amores2/deffinder.sh ' . shellescape(expand(headwords[position])))
            let definition = join(definitionlist, ', ')
            let definition = substitute(definition, '^I ', '', '')
            if len(definition) > 0
                let defcount = defcount + 1
                call add(positions, position)
            endif
            call add(definitions, definition)
        endfor
        " echo 'definitions: '
        " echo definitions
        " echo 'definition count: ' . defcount
        " echo 'positions list: '
        " echo positions
        if defcount == 0 && len(headwords) > 1 || defcount > 1
            let enum_answer = map(copy(headwords), 'v:key . ". " . v:val') 
            call insert(enum_answer, 'Choose a headword for ' . cleanwd . ': ')
            50vsplit _Headwords_
            call append('0', enum_answer)
            redraw
            let choice = input('Select a definition: ')
            let headword = headwords[choice]
            let definition = definitions[choice]
            normal ggdG
            bdelete! _Headwords_
        elseif len(positions) > 0
            let headword = headwords[positions[0]]
            " echo 'headword: ' . headword
            let definition = definitions[positions[0]]
            " echo 'definition: ' . definition
        else
            let headword = headwords[0]
            " echo 'headword: ' . headword
        endif
        if len(definition) == 0
            echo "No definition found for " . cleanwd
            let definition = input('Input definition for ' . cleanwd . ': ')
        endif
        " echo definition
        " line up printing fields
        let pattern = ""
        " echo 'len(word) is ' . len(word)
        " echo 'len(definition) is ' . len(definition)
        if len(word) > len(definition)
            let pattern = '%-' . expand(len(word) + 2) . 's'
        else
            let pattern = '%-' . expand(len(definition) + 2) . 's'
        endif
        " echo 'pattern is ' . pattern
        let topline = topline . printf(pattern, definition)
        " echo 'topline is ' . topline
        let bottomline = bottomline . printf(pattern, word)
        " echo 'bottomline is ' . bottomline
    endfor
    "print to screen
    call setline('.', topline)
    normal o<Esc>
    call setline('.', bottomline)
endfunction
"}}}
    "{{{ GetHeadword
function! GetHeadword(form, dictfile)
    "Error checking
    if len(a:form) == 0
        echo "No word given. Nothing to find headword for! Aborting..."
        return
    endif
    if !filereadable(a:dictfile)
        echo a:dictfile . " is not readable."
        return
    endif
    "Start lookup
    let headwords = systemlist('hermes2.sh ' 
        \ . a:dictfile . ' ' . shellescape(a:form))
    " echo "Headwords: "
    " echo headwords
    if len(headwords) == 0
        let headword = input("Supply headword for " . a:form . ": ", a:form)
    elseif len(headwords) == 1
        let headword = headwords[0]
    else
        let enum_answer = map(copy(headwords), 'v:key . ". " . v:val') 
        call insert(enum_answer, 'Choose a headword for ' . a:form . ': ')
        50vsplit _Headwords_
        call append('0', enum_answer)
        redraw
        let choice = input('Select a definition: [n for none] ')
        normal ggdG
        bdelete! _Headwords_
        if choice == 'n' || choice == ''
            let headword = input("Supply headword for " . a:form . ": ", a:form)
        else
            let headword = headwords[choice]
        endif
    endif
    return headword
endfunction
"}}}
"{{{ TestHeadword
function! TestHeadword()
    let headword = GetHeadword('a', '/home/simon/.config/vim/bundle/vim-amores2/latin-analyses2.txt')
    echo "Headword is : " . headword
endfunction
"}}}
"{{{ GetDefinition
function! GetDefinition(word, dictfile, outputformatter)
    "Error checking
    if len(a:word) == 0
        echo "No word given. Nothing to find headword for! Aborting..."
        return
    endif
    if !filereadable(a:dictfile)
        echo a:dictfile . " is not readable."
        return
    endif
    "Start lookup
    " echo a:word
    let cmd = a:outputformatter . ' ' . a:dictfile . ' ' . shellescape(a:word)
    let definitions = systemlist(cmd)
    " echo "Definitions: "
    " echo definitions
    if len(definitions) == 0
        let definition = input("Supply definition for " . a:word . ": ")
    elseif len(definitions) == 1
        let definition = definitions[0]
    else
        let enum_answer = map(copy(definitions), 'v:key . ". " . v:val') 
        call insert(enum_answer, 'Choose a definition for ' . a:form . ': ')
        50vsplit _Definitions_
        call append('0', enum_answer)
        redraw
        let choice = input('Select a definition: [n for none] ')
        normal ggdG
        bdelete! _Definitions_
        if choice == 'n' || choice == ''
            let definition = input("Supply definition for " . a:form . ": ")
        else
            let definition = definitions[choice]
        endif
    endif
    return definition
endfunction
"}}}
"{{{ TestDefinition
function! TestDefinition()
    let definition = GetDefinition('ab', '/home/simon/.config/vim/bundle/vim-amores2/amores2vocab.txt')
    echo "Definition is: " . definition
endfunction
"}}}
"{{{ SplitAndKeepString
function! SplitAndKeepString(string)
    let spaced = split(a:string, '\s')
    let chunks = []
    for word in range(len(spaced))
        let parts = []
        call add(parts, spaced[word])
        call add(parts, substitute(spaced[word], '\A', '', 'g'))
        call add(chunks,parts)
    endfor
    return chunks
endfunction
"}}}
"{{{ TestSplitAndKeep
function! TestSplitAndKeep()
    let words = SplitAndKeepString('amores?? amores - amores! amores. amores:')
    echo words
endfunction
"}}}
"{{{ LookupAndLabel
function! LookupAndLabel()
    "get indent
    let indent = matchstr(getline('.'), '^\s*')
    let topline = indent
    let bottomline = indent
    "split line into words and punctuation chunks
    let words = SplitAndKeepString(getline('.'))
    "loop through chunks
    for word in words
        " abort loop for punctuation
        " echo "Word is: " . word
        let cleanwd = substitute(word[1], '\(.\{-}\)[^A-z]', '\=submatch(1)', '')
        " echo "Clean word is: " . cleanwd
        if len(cleanwd) != 0
        " get headword
            let headword = GetHeadword(cleanwd,
                \ '/home/simon/.config/vim/bundle/vim-amores2/latin-analyses2.txt')
            " echo "Headword is: " . headword
            " get definition
            let definition = GetDefinition(headword,
                \ '/home/simon/.config/vim/bundle/vim-amores2/amores2vocab.txt', 
                \ 'deffinder.sh')
            let definition = substitute(definition, '^I ', '', '')
            " echo "Definition is: " . definition
        else
            let definition = ''
        endif
        "assemble line
        let pattern = ""
        if len(word[0]) > len(definition)
            let pattern = '%-' . expand(len(word[0]) + 2) . 's'
        else
            let pattern = '%-' . expand(len(definition) + 2) . 's'
        endif
        " echo 'pattern is ' . pattern
        let topline = topline . printf(pattern, definition)
        " echo 'topline is ' . topline
        let bottomline = bottomline . printf(pattern, word[0])
        " echo 'bottomline is ' . bottomline
    endfor
    "print to screen
    call setline('.', topline)
    normal o<Esc>
    call setline('.', bottomline)
endfunction
"}}}
    command! -narg=0 LUL call LookupAndLabel()
"{{{ BirdifyVocab
function! BirdifyVocab()
    "get line
    let this_line = getline('.')
    "split line into words and punctuation chunks
    let words = SplitAndKeepString(getline('.'))
    "loop through chunks
    for word in words
        " abort loop for punctuation
        " echo "Word is: " . word
        let cleanwd = substitute(word[1], '\(.\{-}\)[^A-z]', '\=submatch(1)', '')
        " echo "Clean word is: " . cleanwd
        if len(cleanwd) != 0
        " get headword
            let headword = GetHeadword(cleanwd,
                \ '/home/simon/.config/vim/bundle/vim-amores2/latin-analyses2.txt')
            " echo "Headword is: " . headword
            " get definition
            let definition = GetDefinition(headword,
                \ '/home/simon/.config/vim/bundle/vim-amores2/amores2vocab-shrt.txt', 
                \ 'entryfinder.sh')
            " echo "Definition is: " . definition
        else
            continue
        endif
        "assemble line
        let this_line = this_line . ' ' . definition . ';'
    endfor
    "print to screen
    call setline('.', this_line)
endfunction
"}}}
"{{{ EditBirdRow
function! EditBirdRow()
    let line = getline('.')
    let definitions = substitute(line, '^.\{-}|', '', '')
    35vsplit _Definitions_
    normal! ggdG
    call setline(1, definitions)
    execute 'silent s/^\s*//'
    execute 'silent s/\s*$//'
    execute 'silent s/;\s/;\r/ge'
    " execute 'silent %s/, /\r/ge'
    call setpos('.', [0, 1, 1, 0])
    let &hlsearch = 0
    execute 'nnoremap <buffer> <F12> :RMR<CR>'
endfunction
"}}}
    "{{{ RestoreBirdRow
function! RestoreBirdRow()
    execute 'silent g/^$/d'
    execute 'silent %s/\n/ /ge'
    let line = getline(1)
    execute 'quit!'
    echo 'line is: ' . line
    let vocabline = getline('.')
    echo 'vocabline is: ' . vocabline
    let vocabline = substitute(vocabline, '|.*', '', '')
    echo 'vocabline is: ' . vocabline
    let line = vocabline . '| ' . line
    call setline('.', line)
endfunction
"}}}
"{{{ ReflowBirdLine()
function! ReflowBirdLine()
    let line = getline('.')
    let vocabline = substitute(line, '|.*', '', '')
    let meanings = substitute(line, '^.\{-}|', '', '')
    let meanings = substitute(meanings, ';\s*$', '', '')
    let meaningslist = split(meanings, ';\zs')
    echo meaningslist
    let birdline = ''
    let mct = 0
    let nextmeaning = meaningslist[0]
    while len(expand(birdline . nextmeaning)) < 60
        let birdline = birdline . nextmeaning
        let mct += 1
        let nextmeaning = meaningslist[mct]
    endwhile
    let vocabline = vocabline . '|' . birdline
    call setline('.', vocabline)
    let birdline = printf('%60s', '|')
    while mct < len(meaningslist)
        if len(expand(birdline . nextmeaning)) < 120
            echo 'nextmeaning: ' . nextmeaning
            let birdline = birdline . nextmeaning
            echo 'mct: ' . mct
            echo birdline
            let mct += 1
            if mct < len(meaningslist)
                let nextmeaning = meaningslist[mct]
            endif
        else
            normal o
            call setline('.', birdline)
            let birdline = printf('%60s ', '|')
        endif
    endwhile
    normal o
    call setline('.', birdline)
endfunction
"}}}
"{{{ SplitAndAlignOnCol
function! SplitAndAlignOnCol()
    "For lining up all line numbers in a text
    let line_parts = split(getline('.'), '\s\ze\d')
    let start = substitute(line_parts[0], '\s$', '', 'g')
    let number = join(line_parts[1:], '')
    let new_string = printf("%-59s%s", start, number)
    call setline('.', new_string)
endfunction
"}}}
    command! -narg=0 SAC call SplitAndAlignOnCol()
"{{{ SplitVocabLineIntoSidebar
function! SplitVocabLineIntoSidebar()
    let chosen_match = getline('.')
    let entries = split(chosen_match, ':')
    let headword = entries[0]
    let definitions = split(entries[1], ';')

    35vsplit _Definitions_
    normal! ggdG
    call setline(1, headword . ':')
    call setline(2, definitions)
    execute 'silent 2,$-1s/\n/\r;\r/'
    execute 'silent 2,$s/,/\r/ge'
    call setpos('.', [0, 2, 1, 0])
    let &hlsearch = 0
    execute 'nnoremap <buffer> <F12> :ReEnt<CR>'
    execute 'nnoremap <buffer> <F11> :PrE<CR>'
endfunction
"}}}
    command! -narg=0 SVS call SplitVocabLineIntoSidebar()
"{{{ ReassembleEntry
function! ReassembleEntry()
    let headword = getline(1)
    execute 'silent 2,$s/\w\zs$/,/'
    let definitions = getline(2, '$')
    let entry = headword . join(definitions, '')
    let entry = substitute(entry, ',;', ';', 'g')
    let entry = substitute(entry, ';;', ';', 'g')
    let entry = substitute(entry, ':;', ':', 'g')
    let entry = substitute(entry, ',$', '', '')
    let entry = substitute(entry, ';$', '', '')
    execute 'bdelete! _Definitions_'
    call setline('.', entry)
    let &hlsearch = 1
endfunction
"}}}
    command! -narg=0 ReEnt call ReassembleEntry()
    "{{{ PromoteEntry
function! PromoteEntry()
    let entry = getline('.')
    normal! 2GdG
    call setline(2, entry)
    call ReassembleEntry()
endfunction
"}}}
    command! -narg=0 PrE call PromoteEntry()
    "{{{ CleanFile
function! CleanFile()
    execute 'silent g/^$/d'
    execute 'silent %s/^* //'
    execute 'silent %s/^*//'
    execute "silent %s/^' //"
    execute "silent %s/^'//"
    execute 'silent %s/^` //'
    execute 'silent %s/^`//'
    execute 'silent %s/,\n/, /'
    execute 'silent %s/  / /g'
    execute 'silent %s/ab]/abl/g'
    execute 'silent %s/4- acc/+ acc/'
    execute 'silent %s/4- abl/+ abl/'
    execute 'silent %s/4— acc/+ acc/'
    execute 'silent %s/4— abl/+ abl/'
    execute 'silent %s/—/-/'
    execute 'silent %s/4- /+ /'
    execute 'silent %s/\[ /I /g'
    execute 'silent %s/\] /I /g'
    execute 'silent %s/l /I /g'
    execute 'silent %s/1 /I /g'
    execute 'silent %s/( /(/g'
    execute 'silent %s/ )/)/g'
    execute 'silent %s/111\./m./g'
endfunction
"}}}
"{{{ ShortenDictEntries
function! ShortenDictEntries()
    " shorten domina, dominae f. to domina 1f.
    execute 'silent %s/\(\w\{-}\),\s\1e\s\(f\.\)/\1 1\2/e'
    " shorten amicus, amici m. to amicus 2m.
    execute 'silent %s/\(.\{-}\)us,\s\1i\s\(m\.\)/\1us 2\2/e'
    " shorten puer, pueri m. to puer 2m.
    execute 'silent %s/\(.\{-}\)er,\s\1eri\s\(m\.\)/\1er 2\2/e'
    " shorten donum, doni n. to donum 2n.
    execute 'silent %s/\(.\{-}\)um,\s\1i\s\(n\.\)/\1um 2\2/e'
    " shorten mercator, mercatoris m. to mercator, -is 3m.
    execute 'silent %s/\(\w\{-}\),\s\1is\s\([mfn]\.\)/\1, -is 3\2/e'
    " shorten brevitas, brevitatis f. to brevitas, -atis 3f.
    execute 'silent %s/\(.\{-}\)s,\s\1tis\s\(f\.\)/\1s, -atis 3\2/e'
    " shorten manus, manus f. to manus, -us 4f.
    execute 'silent %s/\(\w\{-}\),\s\1\s\([mfn]\.\)/\1 4\2/e'
    " shorten spes, spei f. to spes 5f.
    execute 'silent %s/\(.\{-}\)es,\s\1ei\s\(f\.\)/\1es 5\2/e'
    " shorten voco, vocare, vocavi, vocatum to voco (1)
    execute 'silent %s/\(.\{-}\)o,\s\1are,\s\1avi,\s\1atum/\1o 1/e'
    " shorten do, dare, dedi, datum to do, (1), dedi, datum
    execute 'silent %s/\(.\{-}\)o,\s\1are,\s\(.*\)/\1o 1, \2/e'
    " shorten moneo, monere, monui, monitum to moneo (2)
    execute 'silent %s/\(.\{-}\)eo,\s\1ere,\s\1ui,\s\1itum/\1eo 2/e'
    " shorten vireo, virere, virui to vireo 2
    execute 'silent %s/\(.\{-}\)eo,\s\1ere\(.*\)/\1eo 2\2/e'
    " shorten audio, audire, audivi, auditum to audio (4)
    execute 'silent %s/\(.\{-}\)io,\s\1ire,\s\1ivi,\s\1itum/\1io 4/e'
    " shorten venio, venire, veni, ventum to venio 4, veni, ventum
    execute 'silent %s/\(.\{-}\)io,\s\1ire\(.*\)/\1io 4\2/e'
    " shorten capio, capere, cepi, captum to capio, (3.5), cepi, captum
    execute 'silent %s/\(.\{-}\)io,\s\1ere,\s\(.*\)/\1io 3.5, \2/e'
    " shorten traho, trahere, traxi, tractum to traho, (3), traxi, tractum
    execute 'silent %s/\(.\{-}\)o,\s\1ere,\s\(.*\)/\1o 3, \2/e'
    " shorten adjective endings
    execute 'silent %s/\(.\{-}\)us,\s\1a,\s\1um/\1us 212/e'
    execute 'silent %s/\(.\{-}\)us,\s-a,\s-um/\1us 212/e'
    " fix legacy (1) (change to 1)
    execute 'silent %s/(\(\d\))/\1/e'
    " remove padding round :
    execute 'silent %s/\s:/:/e'
    " remove I on verbs
    execute 'silent %s/: I/:/e'
endfunction
"}}}
"{{{ MarrySplitLines
function! MarrySplitLines()
    let lines = getline(1, '$')
    let nolines = line('$')/2
    normal ggdG
    for no in range(nolines + 1)
        let newline = lines[no - 1] . ' : ' . lines[no + nolines - 1]
        call setline(no, newline)
    endfor
endfunction
"}}}
"{{{ MarrySelectedLines
function! MarrySelectedLines(line1, line2) range
    let lines = getline(a:line1, a:line2)
    echo 'lines selected'
    let nolines = line(a:line2) - line(a:line1) + 1
    echo 'number of lines to be added is ' . nolines
    normal gvdd
    for no in range(nolines)
        let newline = lines[no] . ' : ' . lines[no + nolines]
        call setline(no, newline)
    endfor
endfunction
"}}}
    command! -narg=0 -range MSL call MarrySelectedLines(<line1>, <line2>)
    "{{{ CorrectDiacritics
function! CorrectDiacritics()
    execute 'silent %s/ä/ā/g'
    execute 'silent %s/ë/ē/g'
    execute 'silent %s/ï/ī/g'
    execute 'silent %s/ö/ō/g'
    execute 'silent %s/ü/ū/g'
endfunction
"}}}
"{{{ ProcessFile
function! ProcessFile()
    call CleanFile()
    call CorrectDiacritics()
    call RemoveDiacritics()
endfunction
"}}}
    command! -narg=0 PrFile call ProcessFile()
    "{{{ AddDeDiacriticedEntry
function! AddDeDiacriticedEntry()
    let lines = getline(1, '$')
    let linenum = 1
    for line in lines
        let parts = split(line, ':')
        let entry = parts[0]
        let entry = substitute(entry, 'ā', 'a', 'g')
        let entry = substitute(entry, 'ē', 'e', 'g')
        let entry = substitute(entry, 'ī', 'i', 'g')
        let entry = substitute(entry, 'ō', 'o', 'g')
        let entry = substitute(entry, 'ū', 'u', 'g')
        call setline(linenum, entry . '- ' .line)
        let linenum += 1
    endfor
endfunction
"}}}
"{{{ RemoveDiacritics
function! RemoveDiacritics()
    execute 'silent %s/ā/a/g'
    execute 'silent %s/ē/e/g'
    execute 'silent %s/ī/i/g'
    execute 'silent %s/ō/o/g'
    execute 'silent %s/ū/u/g'
endfunction
"}}}
"{{{ RemoveCommonWords
function! RemoveCommonWords()
    execute 'silent %s/- ubi .*\n//g'
    execute 'silent %s/- in .*\n//g'
    execute 'silent %s/- a .*\n//g'
    execute 'silent %s/- ad .*\n//g'
    execute 'silent %s/- ab .*\n//g'
    execute 'silent %s/- e .*\n//g'
    execute 'silent %s/- ex .*\n//g'
    execute 'silent %s/- cum .*\n//g'
    execute 'silent %s/- et .*\n//g'
    execute 'silent %s/- nec .*\n//g'
    execute 'silent %s/- equus,.*\n//g'
    execute 'silent %s/- rex,.*\n//g'
    execute 'silent %s/- vox,.*\n//g'
    execute 'silent %s/- qui,.*\n//g'
    execute 'silent %s/- enim .*\n//g'
    execute 'silent %s/- ut .*\n//g'
    execute 'silent %s/- ne .*\n//g'
    execute 'silent %s/- mons,.*\n//g'
    execute 'silent %s/- hic,.*\n//g'
    execute 'silent %s/- ille,.*\n//g'
    execute 'silent %s/- romanus,.*\n//g'
    execute 'silent %s/- pugna,.*\n//g'
    execute 'silent %s/- dux,.*\n//g'
    execute 'silent %s/- castro,.*\n//g'
    execute 'silent %s/- castra,.*\n//g'
    execute 'silent %s/- audio,.*\n//g'
    execute 'silent %s/- dico,.*\n//g'
    execute 'silent %s/- edo,.*\n//g'
    execute 'silent %s/- castrum,.*\n//g'
    execute 'silent %s/- Non\.,.*\n//g'
    execute 'silent %s/- alium,.*\n//g'
    execute 'silent %s/- Indus,.*\n//g'
    execute 'silent %s/- antis,.*\n//g'
    execute 'silent %s/- armum,.*\n//g'
    execute 'silent %s/- armo,.*\n//g'
    execute 'silent %s/- A\.,.*\n//g'
    execute 'silent %s/- C\.,.*\n//g'
    execute 'silent %s/- L\.,.*\n//g'
    execute 'silent %s/- Ti\.,.*\n//g'
    execute 'silent %s/- Gaius,.*\n//g'
endfunction
"}}}
"{{{ EditMeaningsRow
function! EditMeaningsRow()
    let line = getline('.')

    35vsplit _Definitions_
    normal! ggdG
    call setline(1, line)
    execute 'silent s/^\s*//'
    execute 'silent s/\s*$//'
    execute 'silent s/\s\s\s*/\r\r\r/ge'
    execute 'silent %s/, /\r/ge'
    call setpos('.', [0, 2, 1, 0])
    let &hlsearch = 0
    execute 'nnoremap <buffer> <F12> :RMR<CR>'
endfunction
"}}}
    command! -narg=0 EMR call EditMeaningsRow()
    "{{{ ReturnMeaningsRow
function! ReturnMeaningsRow()
    execute 'silent %s/\n\n\n/  /ge'
    execute 'silent %s/\S\zs\n\ze\S/, /ge'
    let line = getline(1)
    execute 'quit!'
    let line = expand(matchstr(getline('.'), '^\s*')) . line
    call setline('.', line)
    normal Vjgv
    execute "'<,'>RWC"
    normal! 0
endfunction
"}}}
    command! -nargs=0 RMR call ReturnMeaningsRow()
    "{{{ RealignWordColumns
function! RealignWordColumns(line1, line2, count) range
    if a:count == -1
        echo "Please visually select lines"
        return
    endif
    let indent = matchstr(getline(a:line1), '^\s*')
    let topline = indent
    let bottomline = indent
    let topline_parts = split(getline(a:line1), '\s\s\s*')
    " echo len(topline_parts)
    " echo topline_parts
    let bottomline_parts = split(getline(a:line2), '\s\s\s*')
    " echo bottomline_parts
    " echo len(bottomline_parts)
    let tpct = 0
    for part in range(len(bottomline_parts))
        if len(substitute(bottomline_parts[part], '[^A-z]', '', 'g')) == 0
            let pattern = '%-' . expand(len(bottomline_parts[part]) + 2) . 's'
            let topline = topline . printf(pattern, '')
            let bottomline = bottomline . printf(pattern, bottomline_parts[part])
        elseif len(topline_parts[tpct]) > len(bottomline_parts[part])
            let pattern = '%-' . expand(len(topline_parts[tpct]) + 2) . 's'
            let topline = topline . printf(pattern, topline_parts[tpct])
            let bottomline = bottomline . printf(pattern, bottomline_parts[part])
            let tpct += 1
        else
            let pattern = '%-' . expand(len(bottomline_parts[part]) + 2) . 's'
            let topline = topline . printf(pattern, topline_parts[tpct])
            let bottomline = bottomline . printf(pattern, bottomline_parts[part])
            let tpct += 1
        endif
    endfor
    call setline(a:line1, topline)
    call setline(a:line2, bottomline)
    call setpos('.', [0, a:line1, 1, 0])
endfunction
"}}}
    command! -nargs=0 -range RWC call RealignWordColumns(<line1>, <line2>, <count>)
" }}}
" {{{expression mappingsdefinition 
   iabbrev   <expr>   dts   strftime('%a %d-%m-%Y %H:%M')
" }}}
" LSP {{{

	if (executable('pyls'))
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'pyls',
		\ 'cmd': {server_info->['pyls']},
		\ 'whitelist': ['python']
		\ })
        autocmd FileType py setlocal omnifunc=lsp#complete
	endif
	if (executable('rls'))
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'rls',
		\ 'cmd': {server_info->['rls']},
		\ 'whitelist': ['rust']
		\ })
        autocmd FileType rs setlocal omnifunc=lsp#complete
	endif

    set completeopt+=menuone

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
endfunction

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

	let g:lsp_diagnostics_enabled = 1
	let g:lsp_auto_enable = 1
	let g:lsp_preview_keep_focus = 1
	let g:lsp_preview_float = 1
	let g:lsp_preview_autoclose = 1
	let g:lsp_preview_doubletap = [function('lsp#ui#vim#output#focuspreview')]
	let g:lsp_insert_text_enabled = 1
	let g:lsp_text_edit_enabled = 1
	let g:lsp_diagnostics_echo_cursor = 1
	let g:lsp_diagnostics_echo_delay = 1000
	let g:lsp_diagnostics_float_cursor = 1
	let g:lsp_diagnostics_echo_delay = 1000
    let g:lsp_highlight_references_enabled = 1
	let g:lsp_signature_help_enabled = 1
" }}}
