" vim:ft=vim:
" Basics {{{
    set nocompatible
    set showmode
    set number
    set relativenumber
    syntax on
    set belloff=all
    set cursorline
    set backspace=indent,start,eol
    set wildmenu
    set shortmess+=I
    set virtualedit=block
    set mouse=a
    cabbrev vhelp   vert help
" }}}
" Cursor settings {{{
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
"}}}
" Leader keys {{{
    let mapleader = "\<space>"
    let maplocalleader = "\\"
    " Esc mappings for all modes
    inoremap fd <Esc>
    vnoremap fd <Esc>
    cnoremap fd <Esc>
"}}}
" File-related mappings {{{
    set hidden
    nnoremap <leader>fs :w<CR>
"}}}
" Copy/Paste/Cut{{{
    if has('unnamedplus')
      set clipboard=unnamed,unnamedplus
    endif

    noremap YY "+y<CR>
    noremap <leader>p "+gP<CR>
    noremap XX "+x<CR>
"}}}
" Sane quitting {{{
    nnoremap <leader>qq :qa!<CR>
"}}}
" Convenience mappings {{{
    " Open this file
    nnoremap <leader>fed :e ~/.vim/vimrc<CR>
    " Source this file
    nnoremap <leader>fer :source ~/.vim/vimrc<CR>
"}}}
" Tabs / Line breaking/ Format options  {{{
    "Tabs
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set shiftround
    set smarttab    " Enables <BS> for dedenting.
    " Linebreaks and wrapping
    set linebreak
    set textwidth=78
    set wrap
    " Indenting
    set autoindent
    set breakindent
    set breakindentopt=shift:2
    let &showbreak = '⤷ '
    " Format options
    " previous options croql
    set formatoptions=qljn
    set nojoinspaces        |" Don't insert two spaces after J
    " Highlighting
    set highlight+=@:ColorColumn
    set highlight+=N:DiffText
    execute 'highlight link EndOfBuffer ColorColumn'
    " Brackets
    set noshowmatch         |" Don't jump between match brackets. Too annoying.
    " Screenupdating
    set lazyredraw          |" Turns off screenupdating during macro playback
    " Scrolling
    set scrolloff=1
    " Lists
    set list
    set listchars=nbsp:⊘
    set listchars+=tab:‣∙
    set listchars+=extends:⁍
    set listchars+=precedes:⁌
    set listchars+=trail:∘
" }}}
" Colours {{{
    set t_Co=256
    set t_ut=
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set background=dark " Setting dark mode
    function! ToggleColorCol()
        if !exists('w:ToggledColorCol')
            let w:ToggledColorCol = 0
        endif
        if w:ToggledColorCol == '0'
            set colorcolumn=78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103
            let w:ToggledColorCol = 1
            echom 'colorcolumn enabled'
        else
            set colorcolumn=
            let w:ToggledColorCol = 0
            echom 'colorcolumn off'
        endif
    endfunction
    nnoremap <leader>cc :call ToggleColorCol()<CR>
" }}}
" Autocommands {{{
    autocmd FileType vim setlocal foldmethod=marker 
    autocmd vimenter * colorscheme archman
" }}}
" Manage vim's internal files  {{{
" Prevent write-permissions errors
if exists('$SUDO_USER')
    set nobackup
    set nowritebackup
else
    set backupdir=~/.vim/tmp/backup
    set backupdir+=.
endif
" Keep swapfiles out of the way
  " creates a path based on the current buffer's path
if exists('$SUDO_USER')
    set noswapfile
else
    set directory=~/.vim/tmp/swap//
    set directory+=.
endif
" Manage undo files for root and normal user
if exists('$SUDO_USER')
    set noundofile
else
    set undodir=~/.vim/tmp/undo//
    set undodir+=.
    set undofile
endif
" Manage viminfo file
if exists('$SUDO_USER')
    set viminfo=
else
    if isdirectory(expand('~/.vim'))
        " name of viminfo file must be last argument
        set viminfo='1000,f1,<500,n~/.config/vim/viminfo
    endif
endif

if !empty(glob('~/.config/vim/viminfo'))
      if !filereadable(expand('~/.config/vim/viminfo'))
            echoerr 'warning: ~/.config/vim/viminfo exists but is not readable'
      endif
endif
" }}}

