########################
## custom functions
########################
function tagger() {
	lltag --clear --yes "$1" && \
	lltag -a "$2" --yes "$1" && \
	lltag -t "$3" --yes "$1"
}

# fuzzy cd and fancy ls -lh
function c() {
  local dir
  dir="$( fd --type d -H -d 5 | fzf )"
  [[ -z $dir ]] && return
  # cd "$dir"
  # exa -l --icons
  ranger $dir
}

# fuzzy search for a file in the current directory and open it in $EDITOR.
function f() {
  local file
  file="$(fd --type f -HL | fzf --preview='bat --color always {}')"
  [[ -z $file ]] && return

  cd "$(dirname $file)"
  # base="$(basename $file)"
  # echo $base
  # $EDITOR "$file"
  $EDITOR "$(basename $file)"
}

# fuzzy search for a file in the Projects directory and open it in $EDITOR.
function j() {
  local file
  file="$(fd --type f -HL . '/home/simon/Projects' | fzf --preview='bat --color always {}')"
  [[ -z $file ]] && return

  cd "$(dirname $file)"
  $EDITOR "$file"
  cd ~/
}

# fuzzy search for a file in a directory under $HOME
# narrowing by directory, and open it in $EDITOR.
function ff() {
  local dir
  dir="$( fd --type d -H . -d 1 ~/ | fzf )"
  [[ -z $dir ]] && return

  local file
  file="$(fd --type f -HL . $dir | fzf --preview='bat --color always {}')"
  [[ -z $file ]] && return

  cd "$(dirname $file)"
  $EDITOR "$file"
}

# open directory in $EDITOR
function dir_in_vim() {
  $EDITOR "$( fd --type d . ~/ | fzf )"
}

# Install packages using paru
function install() {
    paru -Slq | fzf -q "$1" -m --preview 'paru -Si {1}'| xargs -ro paru -S
}
# Remove installed packages using paru
function remove() {
    paru -Qq | fzf -q "$1" -m --preview 'paru -Qi {1}' | xargs -ro paru -Rns
}

function cheat() {
  fd --type f -H . /home/simon/.dotfiles/help | fzf -e --query="$1" --select-1 | xargs -ro $EDITOR
}

function cfg() {
  fd --type f -HL . /home/simon/.config | fzf -e --query="$1" --select-1 | xargs -ro $EDITOR
}

# fdr - cd to selected parent directory
fdr() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
  cd "$DIR"
}

function snipper() {
	options="-i ${1} -ss ${2} -t ${3} -c:a copy -c:v copy ${4}";
	ffmpeg "$options"
}

function giffer() {
  options=(-i "${1}" -ss "${2}" -to "${3}")
  high_quality_gif_settings=(-vf "fps=10,scale=400:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0)
  ffmpeg "${options[@]}" "${high_quality_gif_settings[@]}" "${4}"
}

# function giffer() {
#   options=(-i "${1}" -ss "${2}" -to "${3}")
#   high_quality_gif_settings=(-vf "fps=10,scale=1280:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0)
#   ffmpeg "${options[@]}" "${high_quality_gif_settings[@]}" "${4}"
# }
#
function bak() {
    for file in "$@"; do
        cp "$file" "$file.bak"
    done
}

function tmusic() {
    if [[ -n $TMUX ]]; then
      echo "Already in tmux. Start this in a separate terminal."
      return 0
    fi

    if tmux has-session -t music; then
        tmux attach -t music
        return 0
    fi

    tmux new-session -d -s music -n playlist
    tmux set-window-option status off
    tmux set-window-option -t music:playlist window-style 'bg=#1d1f21'
    tmux send-keys -t music:playlist "ncmpcpp -c ~/.config/ncmpcpp/config" Enter
    tmux split-window -t music:playlist -h
    tmux send-keys -t music:playlist.right "ncmpcpp" Enter
    tmux send-keys -t music:playlist.right "8" Enter
    tmux split-window -t music:playlist.right -v
    tmux send-keys -t music:playlist.bottom-right "ncmpcpp" Enter
    tmux send-keys -t music:playlist.bottom-right "2" Enter
    tmux resize-pane -t music:playlist.left -R 10
    tmux attach -t music:playlist.left
}

function n() {
    if tmux has-session -t RSS; then
        tmux attach -t RSS
        exit
    fi

    tmux new-session -d -s RSS -n newsbeuter
    tmux send-keys -t RSS:newsbeuter "newsbeuter" Enter
    tmux attach -t RSS:newsbeuter
}

function how_in() {
    where="$1"; shift
    IFS=+ curl "https://cht.sh/$where/$*"
}

function contains() { [[ "$1" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]] ;}

function vu() {
    export FIFO_UEBERZUG="/tmp/vifm-ueberzug-${PPID}"
    cleanup() {
        rm "$FIFO_UEBERZUG" 2>/dev/null
        pkill -P $$ 2>/dev/null
    }
    rm "$FIFO_UEBERZUG" 2>/dev/null
    mkfifo "$FIFO_UEBERZUG"
    trap cleanup EXIT
    tail --follow "$FIFO_UEBERZUG" | ueberzug layer --silent --parser bash &
    vifm "$@"
    cleanup
}

function escr() {
    FILE=$( whereis "$1" | cut -d' ' -f2 )
    if [ "$(stat -c %U "$FILE")" == "$USER" ]; then
        $EDITOR "$FILE"
    else
        sudo $EDITOR "$FILE"
    fi
}

function ranger-cd {
    # create a temp file and store the name
    tempfile="$(mktemp -t tmp.XXXXXX)"

    # run ranger and ask it to output the last path into the
    # temp file
    ranger --choosedir="$tempfile" "${@:-$(pwd)}"

    # if the temp file exists read and the content of the temp
    # file was not equal to the current path
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        # change directory to the path in the temp file
        cd -- "$(cat "$tempfile")"
    fi

    # its not super necessary to have this line for deleting
    # the temp file since Linux should handle it on the next
    # boot
    \rm -f -- "$tempfile"
}
########################
## emacs/vterm functions
########################
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_prompt_end(){
    vterm_printf "51;A$(whoami)@$HOSTNAME:$(pwd)"
}
PS1=$PS1'\[$(vterm_prompt_end)\]'

########################
## END custom functions
########################
